Find Low/High Index
Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

If the target is not found in the array, return [-1, -1]. See the example below.

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

vector<int> searchRange(vector<int>& arr, int x){
    int n = arr.size();

    int low = lower_bound(arr.begin(), arr.end(), x) - arr.begin();
    if(low == n || arr[low] != x) return {-1,-1};
    int high = upper_bound(arr.begin(), arr.end(), x) - arr.begin();
    return {low, high-1};
}

    int first(vector<int>& arr, int x){
        int mid, low =0, high=arr.size() -1;
        int ans = -1;
        while(low<=high){
            mid = (low + high)/2;

            if(arr[mid] == x){
                ans = mid;
                high = mid -1;
            }
            else if(arr[mid]> x){
                high = mid -1;
            }
            else{
                low = mid+1;
            }
        }
        return ans;
    }

    int last(vector<int>& arr, int x){
        int mid, low =0, high=arr.size() -1;
        int ans = -1;
        while(low<=high){
            mid = (low + high)/2;

            if(arr[mid] == x){
                ans = mid;
                low = mid + 1;
            }
            else if(arr[mid]> x){
                high = mid -1;
            }
            else{
                low = mid+1;
            }
        }
        return ans;
    }