Trees

Mirror binary tree nodes
Given the root node of a binary tree, swap the ‘left’ and ‘right’ children for each node. The below example shows how the mirrored binary tree should look like.

TreeNode* invertTree(TreeNode* root) {
    if(!root) return root;
    invertTree(root->left);
    invertTree(root->right);
    swap(root->left, root->right);

    return root;
}

bool isSameTree(TreeNode* p, TreeNode* q) {
      if(!p && !q) return true;

      if(p && q && p->val == q->val){
        return isSameTree(p->left, q->left) && isSameTree(p->right, q->right);
      }
      return false;
}

Max Path sum in Tree of non-empty path
      1
    2     5
  3   4  4  3

// prefix sums:
        10
    6       9
  3   4   4   3

  check nodes value :
  by taking it 
  by not taking it if not taking start with 0
int maxPathSum(TreeNode* root) {
// prefix sum of trees 
  int maxSum = INT_MIN;
  maxPath(root, maxSum);
}

int maxPath(TreeNode * root, int &maxSum){
  if(!root) return 0;

  int lsum = max(0, maxPath(root->left, maxSum));
  int rsum = max(0, maxPath(root->right, maxSum));

  maxSum = max(maxSum, lsum + rsum + root->val);

  return root->val + max(lsum, rsum);
}