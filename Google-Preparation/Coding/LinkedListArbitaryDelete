    
    
    void deleteNode(ListNode* node) {
        if(!node) return;

        ListNode *curr = node->next, prev = node;

        while(curr){
            prev->val = curr->val;

            prev = curr;
            curr= curr->next;
        }
    }

    /*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
        Node * curr = head, *newHead = null;
        unordered_map<Node*, Node *> map;

        while(curr){
            Node * newNode = null;
            newNode = new Node(curr->val);
            if(!newHead){
                newHead = newNode;
            }
            map[curr] = newNode;
            curr= curr->next;
        }

        curr = head;

        while(curr){
            map[curr]->next = map[curr->next];
            map[curr]->random = map[curr->random];
            curr = curr->next;
        }
        return newHead;

    }
};