Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.
k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.
You may not alter the values in the list's nodes, only nodes themselves may be changed.


1->2->3->4->5->6 k =2

2->1 ->4->3 ->6->5

Struct Node{
	int val;
	Node * next;
} 

Node * reverseByK(Node *head, int k){

	Node * curr = head;

	Node * prev = NULL, *next;

	int len =0;
	
	if(head == NULL){
		return head;
	}
	
	while(curr){
		curr = curr->next;
		len++;
	}
	
	// 1->2->3->4->5->6->7 k =2
	curr = 2
	next = 2
	prev = 1
	head 1 <-2 
	head 2->1 ->4->3 ->6->5 ->7
	
	int reverse = len/k;
	curr = head;
	bool flag = false;
	while(reverse --){
		for(int i=0;i<k;i++){
			next = curr->next;
			curr->next = prev;
			prev = curr;
			curr = next;
		}
		if(!flag){
			head = prev;
			flag = true;
		}
	}
	return head;
}
