Given a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses substring.


()()()()()


n^2 substrings
Valid paranthesis:

v

String s, if it is valid paranthesis or not.

Brute force approach:
find all strings check if it is valid or not.

( and finsih with ) 

subproblems 

 i,j 
 
recur()

()()()
0 2

o(N^2)

ans  = 2 

Stack : ( )

) top of stck , if it is counterpart of ( then it is valid till this index

(, 

stack is not empty then string is not valid
string is valid if st is not empty


Longest Valid String 
stack 0, length 


()() 

st 

())()
int longestValidSubstring(string s){
	
	int ans = 0;
	int tempAns =0 ;
	stack<char> st;
	for(int i=0;i<s.size();i++){
		if(s[i] == '(')){
			st.push(s[i]);
		}
		else{
			if(!st.empty()){
				tempAns += 2;
				st.pop();
			}
			else{
				
				ans = max(ans, tempAns);
				temp = 0;
			}
		}
	}
	
	return ans;
}
