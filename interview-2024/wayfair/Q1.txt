A system contains pods serving pods numbered from 1 to pods, distributed across multiple geographical regions. These pods are interconnected by n links,
represented by the array connections, such that if two pods are connected directly or indirectly, they belong to the same region.
Each pod has a database connection to which it writes the critical data received. If a pod loses its database connection for some reason, it forwards the data to an active pod in the same region that has the least ID, and that pod writes the data to the region&#039;s database. If there are no active pods left in the region, the data is not written, and an error is recorded in the logs.
w
Process q queries of two types: a data-sending query of the form &quot;1 pod_id,&quot; or a database-connection-failure query of the form &quot;2 pod_id.&quot;
For each data-sending query, the program should output the ID of the pod that writes the data to the database. Specifically, when a data-sending query is made to pod sender_pod_id, the program should find the active pod in the same region as sender_pod_id with the least ID and return its ID as the output. If there are no active pods left in the region, the program should output -1.

Function Description
Complete the function recoverDeadPods in the editor below.
recoverDeadPods has the following parameters:
int pods: number of pods
int connections[n][2]: the connections between pods int queries[q][2]: the queries
Constraints
• 1 s pods ≤ 105
• Osn≤105
• 1 sqs 2×105
• 1 ≤ connections[i][0], connections[i][1] &lt; pods
• 1 ≤ queries[i][0] ≤ 2
• 1 ≤ queries[i] [1]≤ pods
⚫ There is at least 1 query of type 1.
•

public static List&lt;Integer&gt; recoverDeadPods int n, List&lt;List&lt;Integer&gt;&gt; connections, List&lt;List&lt;Integer&gt;&gt; queries) { // Write your code here
}

import java.util.*;

public class Solution {
    public static List<Integer> recoverDeadPods(int pods, List<List<Integer>> connections, List<List<Integer>> queries) {
        Map<Integer, Integer> regionMap = new HashMap<>();
        Map<Integer, TreeSet<Integer>> regionPodsMap = new HashMap<>();
        Set<Integer> activePods = new HashSet<>();
        List<Integer> result = new ArrayList<>();

        // Initialize regionMap and regionPodsMap
        for (int i = 1; i <= pods; i++) {
            regionMap.put(i, i);
            TreeSet<Integer> podSet = new TreeSet<>();
            podSet.add(i);
            regionPodsMap.put(i, podSet);
            activePods.add(i);
        }

        // Process connections to update regionMap and regionPodsMap
        for (List<Integer> connection : connections) {
            int pod1 = connection.get(0);
            int pod2 = connection.get(1);

            int region1 = regionMap.get(pod1);
            int region2 = regionMap.get(pod2);

            if (region1 != region2) {
                // Merge the regions and update regionMap and regionPodsMap
                int newRegion = Math.min(region1, region2);
                int oldRegion = Math.max(region1, region2);

                for (int pod : regionPodsMap.get(oldRegion)) {
                    regionMap.put(pod, newRegion);
                    regionPodsMap.get(newRegion).add(pod);
                }

                regionPodsMap.remove(oldRegion);
            }
        }

        // Process queries
        for (List<Integer> query : queries) {
            int type = query.get(0);
            int podId = query.get(1);

            if (type == 1) {
                int region = regionMap.get(podId);

                if (activePods.contains(podId)) {
                    // If the pod is active, find the pod with the least ID in the region
                    int activePod = regionPodsMap.get(region).first();
                    result.add(activePod);
                } else {
                    // If the pod is not active, return -1
                    result.add(-1);
                }
            } else if (type == 2) {
                // Mark the pod as inactive
                activePods.remove(podId);
            }
        }

        return result;
    }

    public static void main(String[] args) {
        int pods = 5;
        List<List<Integer>> connections = List.of(
                List.of(1, 2),
                List.of(3, 4),
                List.of(4, 5)
        );
        List<List<Integer>> queries = List.of(
                List.of(1, 2),
                List.of(1, 3),
                List.of(2, 4),
                List.of(1, 4),
                List.of(2, 5)
        );

        List<Integer> result = recoverDeadPods(pods, connections, queries);
        System.out.println(result);
    }
}
