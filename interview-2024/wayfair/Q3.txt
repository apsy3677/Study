Implement a prototype service to detect a user&#039;s location based on their IP addresses.
The IP addresses belonging to the IPv4 space are conventionally represented by four octets, &quot;a.b.c.d&quot; - such as 127.10.20.30. To keep it simple, these IP addresses are classified into 5 different regions indexed from 1 to 5 on the basis of the order of the bits in the first octet.
Broadly, the IP Addresses are categorized as follows:
1.0.0.0.0 - 127.255.255.255
2. 128.0.0.0-191.255.255.255
3.192.0.0.0-223.255.255.255
4. 224.0.0.0-239.255.255.255
5. 240.0.0.0 255.255.255.255
Given a list of strings, ip_addresses, of size n, representing possible IPv4 addresses, for each address, determine if it is a valid IP or not, and classify it into one of the 5 classes. Return an array of n integers that represent the index of the regions for the corresponding IP addresses. Represent an invalid IP as -1.

Function Description
Complete the function getRegions in the editor below.
getRegions has the following parameter:
string ip_addresses[n]: the list of possible IPv4 addresses
Returns
int [n]: the regions of the IP addresses or -1 if the IP is invalid
Constraints
1 <= n <= 10^3
• 7 ≤ size(ip_addresses) ≤15

import java.util.ArrayList;
import java.util.List;

public class IPAddressClassifier {

    public static void main(String[] args) {
        List<String> ipAddresses = new ArrayList<>();
        // Populate ipAddresses list with IPv4 addresses

        int[] regions = getRegions(ipAddresses);

        // Print the result
        for (int region : regions) {
            System.out.println(region);
        }
    }

    public static int[] getRegions(List<String> ipAddresses) {
        int n = ipAddresses.size();
        int[] regions = new int[n];

        for (int i = 0; i < n; i++) {
            String ipAddress = ipAddresses.get(i);
            int region = classifyIPAddress(ipAddress);
            regions[i] = region;
        }

        return regions;
    }

    private static int classifyIPAddress(String ipAddress) {
        String[] octets = ipAddress.split("\\.");

        // Check if the IP address has four octets
        if (octets.length != 4) {
            return -1; // Invalid IP address
        }
		// also check if each octet is btwn 0-255
        int firstOctet = Integer.parseInt(octets[0]);

        if (firstOctet >= 0 && firstOctet <= 127) {
            return 1;
        } else if (firstOctet >= 128 && firstOctet <= 191) {
            return 2;
        } else if (firstOctet >= 192 && firstOctet <= 223) {
            return 3;
        } else if (firstOctet >= 224 && firstOctet <= 239) {
            return 4;
        } else if (firstOctet >= 240 && firstOctet <= 255) {
            return 5;
        } else {
            return -1; // Invalid IP address
        }
    }
}
